version: 2.1

orbs:
  php: circleci/php@1.1.0

parameters:
  default-path:
    type: string
    default: "/home/circleci/project/php"

executors:
  docker-default:
    docker:
      - image: cimg/php:8.1
    resource_class: small
    working_directory: 

commands:
  run-tests-parallel-docker:
    steps:
      - checkout
      - restore_cache:
          name: Restore PHP Package Cache
          keys:
            - v2--{{ .Branch }}
      - run:
          name: Install PHP Extensions and Tools
          command: |
            sudo apt-get update
            sudo apt-get install -y php-xml php-curl xvfb
      - run:
          name: Install Composer Dependencies
          command: |
             cd << pipeline.parameters.default-path>>
             composer install --ignore-platform-req=ext-curl --ignore-platform-req=ext-zip
             ls -lah
      - save_cache:
          name: Save PHP Package Cache
          key: v2--{{ .Branch }}
          paths:
            - vendor
            - composer.lock
      - run:
          name: Install Node.js and junit-viewer
          command: |
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g junit-viewer
      - run:
          name: Install and Enable Xdebug
          command: |
            sudo apt-get install -y php-xdebug
            echo "zend_extension=$(find /usr/lib/php/ -name xdebug.so)" | sudo tee /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
            php -v
      - run: |
          cd << pipeline.parameters.default-path>>
          composer install
      - run:
          name: Run PHPUnit with reports
          command: |
            cd << pipeline.parameters.default-path>>
            mkdir -p temp
            TESTFILES=$(circleci tests glob "./tests/**/*.php" | circleci tests split --split-by=timings)
            for x in $TESTFILES; do
              cp --parents "$x" ./temp
            done
            ./vendor/bin/phpunit --coverage-html coverage-report --log-junit reports/junit.xml ./temp || echo "Tests failed"
            junit-viewer --results=reports/junit.xml --save=reports/junit.html
            ls -lah
      - store_test_results:
          path: php/reports
      - store_artifacts:
          path: php/reports
          destination: phpunit-reports

  run-tests-parallel:
    steps:
      - checkout
      - php/install-php:
          version: '8.1'
      - php/install-composer
      - run:
          name: Install PHP Extensions and Tools
          command: |
            sudo apt-get update && sudo apt-get install -y software-properties-common
            sudo add-apt-repository -y ppa:ondrej/php
            sudo apt-get update
            sudo apt-get install -y php8.1 php8.1-cli php8.1-xml php8.1-curl php8.1-mbstring php8.1-xdebug
      - run:
          name: Check PHP Version
          command: php -v
      - run:
          name: Install Composer Dependencies
          command: |
              cd << pipeline.parameters.default-path>>
              composer install --ignore-platform-req=ext-curl --ignore-platform-req=ext-zip --ignore-platform-req=ext-dom
      - run:
          name: Run PHPUnit with HTML Coverage Report (Selenium Ready)
          command: |
            Xvfb :99 &  # start headless display
            export DISPLAY=:99
            cd << pipeline.parameters.default-path>>
            mkdir -p temp
            TESTFILES=$(circleci tests glob "./tests/**/*.php" | circleci tests split --split-by=timings)
            for x in $TESTFILES; do
              cp --parents "$x" ./temp
            done

            ./vendor/bin/phpunit \
              --coverage-html coverage-report \
              ./temp || echo "Tests failed"
      - store_test_results:
          path: coverage-report
      - store_artifacts:
          path: coverage-report
          destination: coverage


jobs:
  php-tests-with-cache:
    executor: docker-default
    parallelism: 45
    steps:
      - run-tests-parallel-docker

  php-tests-no-cache:
    executor: docker-default
    parallelism: 25
    steps:
      - run-tests-parallel


workflows:
  php:
    jobs:
      - php-tests-no-cache
      - php-tests-with-cache
